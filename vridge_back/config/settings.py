"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import my_settings
from corsheaders.defaults import default_headers

import sentry_sdk, os
from sentry_sdk.integrations.django import DjangoIntegration

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/
# IMAGEIO_FFMPEG_EXE = os.environ.get("IMAGEIO_FFMPEG_EXE", "/opt/homebrew/bin/FFmpeg")
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = my_settings.SECRET_KEY

DEBUG = my_settings.DEBUG

ALLOWED_HOSTS = [
    "api.vridge.kr",
    "127.0.0.1",
    "43.201.170.139",
]

# Application definition

DJANGO_APPS = [
    "daphne",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

PROJECT_APPS = [
    "core",
    "users",
    "projects",
    "feedbacks",
    "onlines",
]

THIRD_PARTY_APPS = [
    "channels",
    "corsheaders",
    "rest_framework",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
    "storages",
]

INSTALLED_APPS = DJANGO_APPS + PROJECT_APPS + THIRD_PARTY_APPS

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    # "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "corsheaders.middleware.CorsMiddleware",
]

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": ("rest_framework_simplejwt.authentication.JWTAuthentication",)
}

REST_USE_JWT = True

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=7),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=28),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "ALGORITHM": my_settings.ALGORITHM,
    "SIGNING_KEY": my_settings.SECRET_KEY,
    "VERIFYING_KEY": None,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
}

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"
ASGI_APPLICATION = "config.asgi.application"

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("127.0.0.1", 6379)],
        },
    },
}

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
if DEBUG:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "HOST": my_settings.RDS_HOST,
            "NAME": my_settings.RDS_NAME,
            "USER": my_settings.RDS_USER,
            "PASSWORD": my_settings.RDS_PASSWORD,
            "PORT": "5432",
        }
    }


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


LANGUAGE_CODE = "ko-kr"

TIME_ZONE = "Asia/Seoul"

USE_I18N = True

USE_TZ = True  # False 로 설정해야 DB에 변경 된 TIME_ZONE 이 반영 됨


STATIC_URL = "/static/"  # 접두사
STATIC_ROOT = "static/"  # 실제 저장되는 파일
STATICFILES_DIRS = [BASE_DIR / "staticfiles"]  # 정적 파일을 찾을 수 있는 추가적인 디렉토리 경로

MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "uploads"

DATA_UPLOAD_MAX_NUMBER_FIELDS = 200000

MAX_UPLOAD_SIZE = 429916160

if not DEBUG:
    DEFAULT_FILE_STORAGE = "config.storages.UploadStorage"
    STATICFILES_STORAGE = "config.storages.StaticStorage"
    AWS_ACCESS_KEY_ID = my_settings.AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY = my_settings.AWS_SECRET_ACCESS_KEY
    AWS_STORAGE_BUCKET_NAME = my_settings.AWS_STORAGE_BUCKET_NAME
    AWS_DEFAULT_ACL = "public-read"
    # AWS_S3_OBJECT_PARAMETERS = {"CacheControl": "max-age=86400"}
    AWS_S3_CUSTOM_DOMAIN = f"{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com"
    STATIC_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/static/"

    sentry_sdk.init(
        dsn=my_settings.sentry_url,
        integrations=[
            DjangoIntegration(),
        ],
        # Set traces_sample_rate to 1.0 to capture 100%
        # of transactions for performance monitoring.
        # We recommend adjusting this value in production.
        traces_sample_rate=1.0,
        # If you wish to associate users to errors (assuming you are using
        # django.contrib.auth) you may enable sending PII data.
        send_default_pii=True,
    )

    LOG_FILE = "/var/log/django/django.log"
    LOGGING = {
        "version": 1,
        "disable_existing_loggers": False,
        "formatters": {
            "standard": {"format": "%(asctime)s [%(levelname)s] %(name)s: %(message)s"},
        },
        "handlers": {
            "null": {
                "level": "DEBUG",
                "class": "logging.NullHandler",
            },
            "logfile": {
                "level": "INFO",
                "class": "logging.handlers.TimedRotatingFileHandler",
                "filename": LOG_FILE,
                "when": "midnight",  # 매 자정마다
                "backupCount": 31,
                "formatter": "standard",
            },
            "console": {
                "level": "INFO",
                "class": "logging.StreamHandler",
                "formatter": "standard",
            },
        },
        # Loggers (where does the log come from)
        "loggers": {
            "repackager": {
                "handlers": ["console", "logfile"],
                "level": "DEBUG",
                "propagate": True,
            },
            "django": {
                "handlers": ["console", "logfile"],
                "propagate": True,
                "level": "WARN",
            },
            "django.server": {
                "handlers": ["console", "logfile"],
                "propagate": True,
                "level": "INFO",
            },
            "django.db.backends": {
                "handlers": ["console", "logfile"],
                "level": "WARN",
                "propagate": False,
            },
            "": {
                "handlers": ["console", "logfile"],
                "level": "DEBUG",
            },
            "raven": {
                "level": "DEBUG",
                "handlers": ["console"],
                "propagate": False,
            },
            "sentry.errors": {
                "level": "DEBUG",
                "handlers": ["console"],
                "propagate": False,
            },
            "gunicorn.error": {
                "level": "CRITICAL",
                "handlers": ["logfile"],
                "propagate": True,
            },
            "gunicorn.error": {
                "level": "INFO",
                "handlers": ["logfile"],
                "propagate": True,
            },
            "gunicorn.access": {
                "level": "INFO",
                "handlers": ["logfile"],
                "propagate": False,
            },
            "django.request": {
                "handlers": ["logfile"],
                "level": "ERROR",
                "propagate": False,
            },
        },
    }


DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# from django.conf import global_settings

AUTH_USER_MODEL = "users.User"

CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_ALL_ORIGINS = False
CORS_ALLOWED_ORIGINS = (
    "https://vridge.kr",
    "http://localhost:3000",
    "https://api.vridge.kr",
    "https://vlanet.net",
    "http://127.0.0.1",
)

CORS_ALLOW_METHODS = (
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
)
CORS_ALLOW_HEADERS = (
    "accept",
    "KA",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
)
CORS_ALLOW_HEADERS = list(default_headers) + ["vridge_session"]

# Email 전송
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
# 메일을 호스트하는 서버
EMAIL_HOST = "smtp.gmail.com"
# gmail과의 통신하는 포트
EMAIL_PORT = "587"
# 발신할 이메일
# EMAIL_HOST_USER = '구글아이디@gmail.com'
EMAIL_HOST_USER = my_settings.GOOGLE_ID

# 발신할 메일의 비밀번호
# EMAIL_HOST_PASSWORD = '구글비밀번호'
EMAIL_HOST_PASSWORD = my_settings.GOOGLE_APP_PASSWORD

# TLS 보안 방법
EMAIL_USE_TLS = True

# 사이트와 관련한 자동응답을 받을 이메일 주소
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

# USE_X_FORWARDED_HOST = True
# SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
CSRF_TRUSTED_ORIGINS = [
    "https://api.vridge.kr",
    "https://vridge.kr",
    "https://vlanet.net",
    "http://localhost:3000",
]
